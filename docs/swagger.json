{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Aqua API",
    "description": "API documentation for the Aqua track, including users and authentication operations.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "http://127.0.0.1:8080",
      "description": "Local development server"
    },
    {
      "url": "https://aqua-api-fkf8.onrender.com",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Water",
      "description": "Operations with water consumed by users and consumption analytics."
    },
    {
      "name": "Users",
      "description": "Operations for managing users."
    },
    {
      "name": "Auth",
      "description": "Operations related to user authentication and authorization."
    }
  ],
  "paths": {
    "/water": {
      "post": {
        "tags": [
          "Water"
        ],
        "summary": "Creating a record of drinking water",
        "operationId": "createWaterRecord",
        "description": "***Creating a new record of water drunk at a specific time***\n\n**Required fields**\n- date:   *Date and time of drinking water*\n          (формат \"yyyy-mm-ddThh:mm\")\n- volume: *The volume of water drunk at the specified time*\n          (in milliliters, from 50 to 5000)\n\n### Security\n- This endpoint requires authentication via a Bearer Token.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "date",
                  "volume"
                ],
                "properties": {
                  "date": {
                    "type": "string",
                    "description": "Date and time (формат \"yyyy-mm-ddThh:mm\")",
                    "example": "2025-01-10T14:02"
                  },
                  "volume": {
                    "type": "number",
                    "description": "The volume of water drunk (in milliliters)",
                    "example": 300
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a record",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a waterRecord!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/water"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/water/{id}": {
      "delete": {
        "tags": [
          "Water"
        ],
        "summary": "Deleting a record of drinking water",
        "operationId": "deleteWaterRecord",
        "description": "**Deleting a record of drinking water**\n\nThis endpoint allows you to remove an existing entry from your list.\nOnce deleted, a recording cannot be restored.\n\n### Security\n- This endpoint requires authentication via a Bearer Token.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier for the entry will be removed",
            "example": "6779c35e16fb05e4092b039b"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted successfully **  (No Content)**",
            "content": {}
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Record not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Water"
        ],
        "summary": "Change in an existing record of the amount of water you drink",
        "description": "**Update the field for recording the water consumed at a specific point in time by its ID.**\n\nThis endpoint allows you to partially update an existing water drink record.\n\n### Security\n- This endpoint requires authentication via a Bearer Token.\n",
        "operationId": "updateWaterRecord",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the record to update.",
            "example": "6779b9f903d039994c667196"
          }
        ],
        "requestBody": {
          "description": "Field <volume> to update in the water record",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "volume": {
                    "description": "Volume of water drunk",
                    "type": "number",
                    "example": 500
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully patched a water user record!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated the record!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/water"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Record not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/water/day/{date}": {
      "get": {
        "tags": [
          "Water"
        ],
        "summary": "Get a list of water consumed per day by hour",
        "operationId": "getWaterDay",
        "description": "***Data on daily water consumption and their analysis***\n\n**You get:**\n- total water consumption per day\n- percentage of water consumed relative to the daily norm\n- array of volume of water drunk by hour\n\n**ATTENTION: The array entries are sorted by time in ascending order.**\n\n### Security\n- This endpoint requires authentication via a Bearer Token.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "date",
            "example": "2025-01-04"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found records!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved records."
                    },
                    "data": {
                      "$ref": "#/components/schemas/waterDay"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/water/month/{month}": {
      "get": {
        "tags": [
          "Water"
        ],
        "summary": "Get list of water consumed for the month by day",
        "operationId": "getWaterMonth",
        "description": "***List of days of the month with the amount of water drunk and percentage of the daily norm***\n\n**You get array with elements:**\n- day of the month\n- total amount of water drunk that day\n- percentage of water consumed to the daily norm\n\n**ATTENTION: Days for which there is no data on water consumed are not displayed.**\n\n### Security\n  - This endpoint requires authentication via a Bearer Token.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Month for which water information is needed",
            "example": "2025-01"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found contacts!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found records!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/waterMonth"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/current": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update the current user",
        "description": "Update specific fields of the current user",
        "operationId": "updateUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Fields to update in the user",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "User's name",
                    "type": "string"
                  },
                  "weight": {
                    "description": "Weight of the user in kilograms",
                    "type": "number",
                    "example": 75
                  },
                  "waterNorma": {
                    "description": "Daily water intake in milliliters",
                    "type": "number",
                    "example": 1500
                  },
                  "gender": {
                    "description": "Gender of the user",
                    "type": "string",
                    "enum": [
                      "woman",
                      "man"
                    ]
                  },
                  "photo": {
                    "description": "User's photo",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated user"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/users"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user",
        "operationId": "getCurrentUser",
        "description": "Retrieve the current authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found user"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "operationId": "signin",
        "description": "Authenticate a user and return an access token",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address",
                    "example": "john.doe@example.com",
                    "pattern": "^[^@]+@[^@]+\\.[^@]+$"
                  },
                  "password": {
                    "type": "string",
                    "description": "User's password. Must be 8-32 characters long, containing at least one uppercase letter, one lowercase letter, one number, and one special character.",
                    "example": "P@ssw0rd123",
                    "minLength": 8,
                    "maxLength": 32
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "Access token for authenticated user",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user",
        "operationId": "signup",
        "description": "Create a new user account.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address",
                    "example": "john.doe@example.com",
                    "pattern": "^[^@]+@[^@]+\\.[^@]+$"
                  },
                  "password": {
                    "type": "string",
                    "description": "User's password. Must be 8-32 characters long, containing at least one uppercase letter, one lowercase letter, one number, and one special character.",
                    "example": "P@ssw0rd123",
                    "minLength": 8,
                    "maxLength": 32,
                    "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully registered user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered user!"
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error (e.g., missing required fields)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Name, email, and password are required."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "409": {
            "description": "Email already in use",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Email is already in use."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh access token",
        "operationId": "refreshToken",
        "description": "Refresh the user's access token using the refresh token",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refreshed session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed session!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "New access token",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "operationId": "logout",
        "description": "Logout the user and invalidate their session.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out user. No content is returned."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User session not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/send-reset-email": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Request password reset email",
        "operationId": "sendResetEmail",
        "description": "Send an email with a link to reset the user's password",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address",
                    "example": "john.doe@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset email sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Reset password email was successfully sent!"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid email address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid email address provided."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/reset-pwd": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset password",
        "operationId": "resetPassword",
        "description": "Reset the user's password using the provided token.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "password",
                  "token"
                ],
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "New password. Must be 8-32 characters long, containing at least one uppercase letter, one lowercase letter, one number, and one special character.",
                    "example": "N3wP@ssw0rd"
                  },
                  "token": {
                    "type": "string",
                    "description": "Token received in the reset email",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Password was successfully reset!"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "User not found."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/get-oauth-url": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get Google OAuth URL",
        "operationId": "getAuthUrl",
        "description": "Retrieve the URL for Google OAuth authentication.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved OAuth URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved Google OAuth URL."
                    },
                    "data": {
                      "type": "string",
                      "description": "Google OAuth URL",
                      "example": "https://accounts.google.com/o/oauth2/auth?..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid configuration for Google OAuth.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Missing required Google OAuth configuration."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Use the Bearer token for authorization."
      }
    },
    "schemas": {
      "water": {
        "type": "object",
        "required": [
          "date",
          "volume"
        ],
        "properties": {
          "_id": {
            "description": "Record's id",
            "type": "string",
            "example": "6779b9f903d039994c667196"
          },
          "userId": {
            "description": "ID of the user who owns the record",
            "type": "string",
            "example": "675a2bdc1396640c2c39d34c"
          },
          "date": {
            "description": "Date and time of drinking water",
            "type": "string",
            "example": "2025-01-03T18:02"
          },
          "volume": {
            "description": "Volume of water drunk",
            "type": "number",
            "example": 500
          }
        }
      },
      "waterDay": {
        "type": "object",
        "required": [
          "totalWaterDay",
          "percent",
          "waterDayByHour"
        ],
        "properties": {
          "totalWaterDay": {
            "description": "Total water drunk per day",
            "type": "number",
            "example": 800
          },
          "percent": {
            "description": "Percentage of water actually drunk to the daily norm",
            "type": "number",
            "example": 44
          },
          "waterDayByHour": {
            "description": "Array of objects: of data on water consumed by hour",
            "type": "array",
            "required": [
              "_id",
              "date",
              "volume"
            ],
            "properties": {
              "_id": {
                "description": "Record's id",
                "type": "string",
                "example": "6779b9f903d039994c667196"
              },
              "date": {
                "description": "Date and time of drinking water",
                "type": "string",
                "example": "2025-01-03T18:02"
              },
              "volume": {
                "description": "Amount of water drunk at the specified time",
                "type": "number",
                "example": 300
              }
            }
          }
        }
      },
      "waterMonth": {
        "type": "object",
        "required": [
          "waterMonthByDay"
        ],
        "properties": {
          "waterMonthByDay": {
            "type": "array",
            "description": "Array of objects: water consumption data for each day of the month.",
            "required": [
              "day",
              "totalVolume",
              "percent"
            ],
            "properties": {
              "day": {
                "description": "Date of drinking water",
                "type": "string",
                "example": "2025-01-03"
              },
              "totalVolume": {
                "description": "Volume of water drunk per day",
                "type": "number",
                "example": 1500
              },
              "percent": {
                "description": "Percentage of water actually drunk to the daily norm",
                "type": "number",
                "example": 100
              }
            }
          }
        }
      },
      "users": {
        "type": "object",
        "required": [
          "userId",
          "email",
          "password"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "description": "Unique identifier for the user.",
            "example": "63c0a6f8f1d3e55678a23f1d"
          },
          "name": {
            "type": "string",
            "description": "Name of the user.",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Unique email address of the user.",
            "example": "johndoe@example.com"
          },
          "waterNorma": {
            "type": "number",
            "description": "Daily water consumption norm in milliliters.",
            "default": 1500,
            "maximum": 15000,
            "example": 2000
          },
          "weight": {
            "type": "number",
            "description": "Weight of the user in kilograms.",
            "default": 0,
            "example": 75
          },
          "password": {
            "type": "string",
            "description": "Hashed password of the user.",
            "example": "hashedpassword123"
          },
          "gender": {
            "type": "string",
            "description": "Gender of the user.",
            "enum": [
              "woman",
              "man"
            ],
            "default": "woman",
            "example": "man"
          },
          "activeTime": {
            "type": "number",
            "description": "Total active time of the user in houres.",
            "default": 0,
            "example": 2
          },
          "photo": {
            "type": "string",
            "description": "URL to the user's profile photo.",
            "default": "https://res.cloudinary.com/dwshxlkre/image/upload/v1736365275/avatar_yajq6q.png",
            "example": "https://example.com/photo.jpg"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "BadRequestError",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "BadRequestError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "BadRequestError"
                    },
                    "errors": {
                      "type": "array",
                      "example": [
                        {}
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Unauthorized Error"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "**Conflict Error (409)**\n\nThis error occurs when there is a conflict with the current state of the resource.\n- In this case, the conflict occurs because the specified water consumption time already exists in the database.\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "description": "HTTP status code indicating the error type.",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "description": "A brief summary of the conflict error.",
                  "example": "ConflictError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message",
                    "errors"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Specific details about the error, such as the conflicting field.",
                      "example": "Email already in use"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal server Error"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Detailed error message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}